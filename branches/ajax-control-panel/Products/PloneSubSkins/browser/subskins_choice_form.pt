<span tal:attributes=" class python: view.detatched and 'detatched' or ''">
<form name="prefs"
  method="post"
  class="enableUnloadProtection plonesubskins_choice_form"
  tal:attributes="action string:${view/tool_url}/saveStylesheetChoices"
  tal:define="portal_url view/portal_url;"
  id="subskins_prefs_styles">

        <fieldset  >
            <legend i18n:translate="legend_portalskin_details">[↓] Select layout for each section: [↓] </legend>
	<div id="choice_form_body">
			<div class="field">
                <label>Select Color scheme for the site</label>

               
                <select id="colorschemes_choice" name="colorschemes_choice" onchange="switchcolors(this.value, this.options)"
                    tal:define="current python:view.tool.hasProperty('colorschemes') and view.tool.getProperty('colorschemes') or ''"
					id="default_navigation"
                    size="1">
					<option value="">None</option>
					<tal:block tal:repeat="s python:view.tool.getAvailableColorSchemes()">
						<option tal:attributes="value s;
     selected python:current==s and 'selected' or '';"
							tal:content="s"></option>
					</tal:block>
				</select>
            </div>
<tal:colorschemes tal:repeat="cs view/tool/listColors">
<span tal:attributes="id python:'colors_'+cs[0]" style="display: none">
<table><tr height="30px">
<tal:colors tal:repeat="c python:cs[1]">
<td width="30px" tal:attributes="bgcolor c">&nbsp;</td>
</tal:colors>
</tr></table>
</span>
</tal:colorschemes >
<script>
function switchcolors(id, list) {
  for(i=1;i<list.length;i++) {
    document.getElementById('colors_'+list[i].value).style.display='none'
  }
  if(id!='') document.getElementById('colors_'+id).style.display='inline'
}
jQuery(function() {switchcolors(document.getElementById('colorschemes_choice').value, document.getElementById('colorschemes_choice').options)});


/* Begin Live preview Javascript */


var currentStyleSelection = {};
function saveCurrentStyles() {
    jQuery('#subskins_prefs_styles select').each(function() {
        currentStyleSelection[this.id] = this.value;
    });

}
jQuery(saveCurrentStyles);
function initialize_select() {
	jQuery('#subskins_prefs_styles select').change(function(){
		if (this.id == 'colorschemes_choice') {
			newColorSchemeSelected(this.value);

		}else if (currentStyleSelection[this.id] != this.value) {
			switchCss(currentStyleSelection[this.id], this.value);
			currentStyleSelection[this.id] = this.value;
		}
		    
	});
}
jQuery(initialize_select);

function newColorSchemeSelected(colorscheme_name) {
	for (var category in currentStyleSelection) {
		var cssname = currentStyleSelection[category];
		if (category != 'colorschemes_choice' && cssname != '') {
			var node = jQuery('style').filter(nodeContainsFactory(cssname))[0];
			if (node) {
				newtag = createCssNode(cssname);
				swapnodes(newtag, node);
			} else {
				console.error('Expected to find ' + cssname);
			}

		}
	}
}
function swapnodes(newtag, oldnode) {
	// oldnode will contain in its text a url()
	// we request it, and when we know it's available to the browser
	// we inject the stylesheet in head, so that content doesn't flicker
	// var url = jQuery(newtag).text().match(/url\(([^)]+)\)/)[1];
	// XXX this approach doesn't work. It will flicker.
	jQuery('head').append(newtag);
	jQuery(oldnode).remove();
}

function createCssNode(styleSheetName) {
	var currentColorScheme = jQuery('#colorschemes_choice')[0].value; 
	// we choose a random (the first, really) css from portal_css
	// and use it as a template to build another css import html node
	var templateCss = jQuery('style').filter(nodeContainsFactory('portal_css'))
	                                 .filter(nodeContainsFactory('@import')).html();
	var colorSchemeToken = "?colorscheme=" + currentColorScheme;
	var thisStyle = templateCss.replace(/[^\/]+$/,styleSheetName) + colorSchemeToken;
	var newtag = '<' + 'style type="text/css" media="all"' + '>' + thisStyle + ');' + '<' + '/style>';
	return jQuery(newtag);
}

function switchCss(previousCss,nextCss) {
	var newtag;
	var node = jQuery('style').filter(nodeContainsFactory(previousCss))[0];
	if (previousCss == '' || node === undefined) {
		var newtag = createCssNode(nextCss);
		jQuery('head').append(newtag);
	} else {
		if (nextCss=='') {
			jQuery(node).remove();
		} else {
			newinnerhtml = node.innerHTML.replace(previousCss, nextCss);
			newtag = '<' + 'style type="text/css" media="all"' + '>' + newinnerhtml + ');' + '<' + '/style>';
			swapnodes(jQuery(newtag), node);
		}
	}
}

function nodeContainsFactory(expr) {
	filterExpr = expr;
	function nodeContains(node) {
		if (jQuery(this).html().indexOf(filterExpr)>=0)
		    return true;
		return false;
	}
	return nodeContains;
}
/* End Live preview Javascript */

</script>
            <tal:loop tal:repeat="category python:view.tool.getStylesheetCategories()">
            <div class="field">
                <label tal:content="python:category['label']">sub skin label</label>

		<select tal:attributes="name python:category['id']+'_choice';
			                id python:category['id']+'_choice'" 
                    tal:define="current python:view.tool.hasProperty(category['id']) and view.tool.getProperty(category['id']) or ''"
					id="default_navigation"
                    size="1">
					<option value="">None</option>
					<tal:block tal:repeat="s python:view.tool.getAvailableStyleSheets(category['id'])">
						<option tal:attributes="value s;
								selected python:current==s and 'selected' or '';
												"
							tal:content="s"></option>
					</tal:block>
				</select>
            </div>
			</tal:loop>
			
			
			<p><a href="" tal:attributes="href string: $portal_url/portal_view_customizations/manage">
Click here to customize the viewlets</a> (changing the footer, colophon etc.)
<br>
<a href="" tal:attributes="href string: $portal_url/@@manage-viewlets">
Click here to manage viewlets</a> (changing the order of stuff on a page, hide the search box etc.)
</p>



       <div class="formControls">
                <input class="context"
                       type="submit"
                       name="submit"
                       value="Save"
                       i18n:attributes="value label_save;"
                       />
            </div>

        <input type="hidden" name="form.submitted" value="1" />
      </div>
      </fieldset>
</form>
</span>
